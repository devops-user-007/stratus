# Installing and configuring the components required for controller

# Environment
- name: Install NTP
  yum: name=chrony
- name: Copy chrony.conf
  template: src=../templates/chrony.conf dest=/etc/chrony.conf
- name: Start and Enable chrony
  systemd: name=chronyd.service enabled=True state=started
- name: Enable the OpenStack repository
  yum: name=centos-release-openstack-newton
- name: Upgrade the packages on your host
  yum: name="*" state=latest
- name: Install the OpenStack client
  yum: name={{ item }}
  with_items:
    - python-openstackclient
    - openstack-selinux
- name: Install and configure components
  yum: name={{ item }}
  with_items:
    - mariadb
    - mariadb-server
    - python2-PyMySQL
- name: Copy openstack.cnf
  template: src=../templates/openstack.cnf dest=/etc/my.cnf.d/openstack.cnf
- name: Start and Enable database service
  syatemd: name=mariadb.service enabled=yes state=started
- name: Mysql secure installation
  shell: mysql_secure_installation
- name: Install Rabbitmq
  yum: name=rabbitmq-server
- name: Start and Enable Rabbitmq
  systemd: name=rabbitmq-server enabled=yes state=started
- name: Add the openstack user and permissions
  shell: rabbitmqctl {{ item }}
  with_items:
    - add_user openstack {{ rabbit_pass }}
    - set_permissions openstack ".*" ".*" ".*"
  ignore_errors: True
- name: Install Memcached
  yum: name={{ item }}
  with_items:
    - memcached
    - python-memcached
- name: Copy /etc/sysconfig/memcached
  template: src=../templates/memcached dest=/etc/sysconfig/memcached
- name: Start and Enable Memcached
  systemd: name=memcached.service enabled=yes state=started

# Identity
- name: Create keystone DB
  mysql_db: name=keystone state=present
- name: Grant permissions to keystone DB
  mysql_user: name=keystone password={{ keystone_db_pass }} priv="*.*:ALL,GRANT" state=present
- name: Install keystone,httpd,mod_wsgi
  yum: name={{ item }}
  with_items:
    - openstack-keystone
    - httpd
    - mod_wsgi
- name: Copy /etc/keystone/keystone.conf
  template: src=../templates/keystone.conf dest=/etc/keystone/keystone.conf
- name: Populate the Identity service database
  shell: su -s /bin/sh -c "keystone-manage db_sync" keystone
- name: Initialize Fernet key repositories
  shell: keystone-manage {{ item }} --keystone-user keystone --keystone-group keystone
  with_items:
    - fernet_setup
    - credential_setup
- name: Bootstrap the Identity service
  shell: keystone-manage bootstrap --bootstrap-password {{ admin_user_pass }} --bootstrap-admin-url http://controller:35357/v3/ --bootstrap-internal-url http://controller:35357/v3/ --bootstrap-public-url http://controller:5000/v3/ --bootstrap-region-id {{ region_one }}
- name: Configure the Apache HTTP server
  blockinfile:
    dest: /etc/httpd/conf/httpd.conf
    content: ServerName controller
- name: Create a link to the /usr/share/keystone/wsgi-keystone.conf
  file:
    src: /usr/share/keystone/wsgi-keystone.conf
    dest: /etc/httpd/conf.d/
    state: link
- name: Start and Enable httpd
  systemd: name=httpd.service enabled=yes state=started
- name: Copy RC file for ADMIN
  template: src=../templates/adminrc dest=/root/adminrc
- name: Create a domain, projects, users, and roles
  shell: openstack {{ item }}
  with_items:
    - project create --domain default --description "Service Project" service
    - project create --domain default --description "Demo Project" demo
    - user create --domain default --password {{ demo_user_pass }} demo
    - role create user
    - role add --project demo --user demo user
  environment: {{ adminrc }}

# Compute
- name: create the database for compute
  mysql_db: name={{ item }} state=present
  with_items:
    - nova_api
    - nova
- name: Grant permission to compute DB
  mysql_user: name={{ item }} password={{ nova_db_pass }} priv="*.*:ALL,GRANT" state=present
  with_items:
    - nova_api
    - nova
- name: Register Nova to openstack
  shell: openstack {{ item }}
  with_items:
    - user create --domain default --password {{ nova_user_pass }} nova
    - role add --project service --user nova admin
    - service create --name nova --description "OpenStack Compute" compute
    - endpoint create --region {{ region_one }} compute public http://controller:8774/v2.1/%\(tenant_id\)s
    - endpoint create --region {{ region_one }} compute internal http://controller:8774/v2.1/%\(tenant_id\)s
    - endpoint create --region {{ region_one }} compute admin http://controller:8774/v2.1/%\(tenant_id\)s
  environment: {{ adminrc }}

- name: Install Nova apckages
  yum: name={{ item }}
  with_items:
    - openstack-nova-api
    - openstack-nova-conductor
    - openstack-nova-console
    - openstack-nova-novncproxy
    - openstack-nova-scheduler
- name: Copy /etc/nova/nova.conf
  template: src=../templates/nova.conf dest=/etc/nova/nova.conf
- name: Populate the nova DB
  shell: su -s /bin/sh -c {{ item }} nova
  with_items:
    - "nova-manage api_db sync"
    - "nova-manage db sync"
- name: Start and Enable nova services
  systemd: name={{ item }} enabled=yes state=started
  with_items:
    - openstack-nova-api.service
    - openstack-nova-consoleauth.service
    - openstack-nova-scheduler.service
    - openstack-nova-conductor.service
    - openstack-nova-novncproxy.service 

# Dashboard
- name: Install the packages
  yum: name=openstack-dashboard
- name: Copy /etc/openstack-dashboard/local_settings
  template: src=../templates/local_settings dest=/etc/openstack-dashboard/local_settings
- name: Start and Enable Horizon services
  systemd: name={{ item }} enabled=yes state=restarted
  with_items:
    - httpd.service
    - memcached.service


# Network
- name: Create the Neutron DB
  mysql_db: name=neutron state=present
- name: Grant permissions to Neutron DB
  mysql_user: name=neutron password={{ neutron_db_pass }} priv="*.*:ALL,GRANT" state=present
- name: Register Neutron to openstack
  shell: openstack {{ item }}
  with_items:
    - user create --domain default --password {{ neutron_user_pass }} neutron
    - role add --project service --user neutron admin
    - openstack service create --name neutron --description "OpenStack Networking" network
    - endpoint create --region {{ region_one }} network public http://controller:9696
    - endpoint create --region {{ region_one }} network internal http://controller:9696
    - endpoint create --region {{ region_one }} network admin http://controller:9696

# Networking option 2 ( Self - Service Networks)
- name: Install the packages
  yum: name={{ item }}
  with_items:
    - openstack-neutron
    - openstack-neutron-ml2
    - openstack-neutron-linuxbridge
    - ebtables
- name: Copy /etc/neutron/neutron.conf
  template: src=../templates/neutron.conf dest=/etc/neutron/neutron.conf
- name: Copy /etc/neutron/plugins/ml2/ml2_conf.ini
  template: src=../templates/ml2_conf.ini dest=/etc/neutron/plugins/ml2/ml2_conf.ini
- name: Copy /etc/neutron/plugins/ml2/linuxbridge_agent.ini
  template: src=../templates/linuxbridge_agent.ini dest=/etc/neutron/plugins/ml2/linuxbridge_agent.ini
- name: Copy /etc/neutron/l3_agent.ini
  template: src=../templates/l3_agent.ini dest=/etc/neutron/l3_agent.ini
- name: Copy /etc/neutron/dhcp_agent.ini
  template: src=../templates/dhcp_agent.ini dest=/etc/neutron/dhcp_agent.ini
- name: Copy /etc/neutron/metadata_agent.ini
  template: src=../templates/metadata_agent.ini dest=/etc/neutron/metadata_agent.ini
- name: Configure Nova (/etc/nova/nova.conf) to use Neutron
  template: src=../templates/nova.conf dest=/etc/nova/nova.conf)    #################
- name: Create symlink between ml2_conf.ini and /etc/neutron/plugin.ini
  file: src=/etc/neutron/plugins/ml2/ml2_conf.ini dest=/etc/neutron/plugin.ini state=link
- name: Populate Neutron DB
  shell: su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
- name: Restart Nova api service
  systemd: name=openstack-nova-api.service state=restarted
- name: Start and Enable Neutron services
  systemd: name={{ item }} enabled=yes state=started
  with_items:
    - neutron-server.service
    - neutron-linuxbridge-agent.service
    - neutron-dhcp-agent.service
    - neutron-metadata-agent.service
    - neutron-l3-agent.service
  
